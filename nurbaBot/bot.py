from telebot import types

import telebot
from nurbaBot import setting
from nurbaBot.cinema_parser import  get_cinema_address, get_broadwey
from nurbaBot.db import insert_table, insert_poster, select_category, select_category_where, select_poster, \
    beautifully_poster

bot = telebot.TeleBot(setting.TG_BOT)

keyboard1 = telebot.types.ReplyKeyboardMarkup(True)
keyboard1.row('help', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '–ß—Ç–æ —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç?' + '\n–Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ –ë–∏—â–∫–µ–∫', reply_markup=keyboard1)
    insert_table(message.chat.id, message.chat.username)


@bot.message_handler(content_types=['text'])
def send_text(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':

        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton(text='–•–æ—Ä–æ—à–æ', callback_data='good')
        item2 = types.InlineKeyboardButton(text='–ù–µ –æ—á–µ–Ω—å', callback_data='bad')

        markup.add(item1, item2)

        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?', reply_markup=markup)

    elif message.text == 'help':
        help = '–í—Å–µ –∫–æ–º–∞–Ω–¥—ã:' + \
               '\n–ü—Ä–∏–≤–µ—Ç + –ü–æ–∫–∞:  –û—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å' + \
               '\nfrog: –°—Ç–∏–∫–µ—Ä—ã' + \
               '\n/add_poster: –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö' + \
               '\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ' + \
               '\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' + \
               '\n–ê –µ—â–µ —è —Å–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à—É id –∏ user_id —á—Ç–æ –±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Ä–µ–∫–ª–∞–º—É'

        bot.send_message(message.chat.id, help)

    elif message.text.lower() == '–ø–æ–∫–∞':
        bot.send_message(message.chat.id, '–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è')

    elif message.text.lower() == 'frog':
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAJchV-2gdzFQ_o8NgbJts8wgDGF7R6zAAJoAAPBnGAMjCWf833RMLEeBA')

    elif message.text == '/add_poster':
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏–µ—Ç –∞—Ñ–∏—à—É:'
                                          '\n–ù–∞–ø—Ä–∏–º–µ—Ä:'
                                          '\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
                                          '\n–ù–∞–∑–≤–∞–Ω–∏—è;'
                                          '\n–ê–¥–¥—Ä–µ—Å;'
                                          '\n2018-11-23 17:31:26;'
                                          '\n—Å—Å—ã–ª–∫–∞ –∫ –∞–¥–¥—Ä–µ—Å—É')

    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞—Ñ–∏—à–∏':
        article_poster = beautifully_poster(select_poster())
        index = len(article_poster) / 7
        i = 1
        while i <= index:
            string_num = str(i)
            string = '–ò–º—è: ' + article_poster['name' + string_num] + \
                     '\n–ê–¥—Ä–µ—Å: ' + article_poster['address' + string_num] + \
                     '\n–í—Ä–µ–º—è: ' + article_poster['date_time' + string_num] + \
                     '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + article_poster['text' + string_num]
            link_location = article_poster['location' + string_num]

            markup = types.InlineKeyboardMarkup()
            item1 = types.InlineKeyboardButton(text="2–≥–∏—Å", url=link_location)
            markup.add(item1)

            bot.send_message(message.chat.id, string, reply_markup=markup)

            i += 1

    elif message.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏':
        list_category = select_category()

        if len(list_category) == 0:
            bot.send_message(message.chat.id, '–ê—Ñ–∏—à –Ω–µ—Ç')
        else:
            index = 0
            for ctg in select_category():
                markup = types.InlineKeyboardMarkup()
                item1 = types.InlineKeyboardButton(text=ctg[index], callback_data='//' + ctg[index])
                markup.add(item1)

                index += 1

            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup)

    elif message.text[:1] + message.text[len(message.text):] == '#':  #insert poster
        bot.send_message(message.chat.id, '–óa–≥—Ä—É–∂–∞—é...')
        try:
            s = message.text[1:]  # –£–¥–∞–ª–∏—Ç—å —Å–∏–º–≤–æ–ª "#"
            category = s.split(';')[0]  # –†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
            name = s.split(';')[1]
            address = s.split(';')[2]
            date_time = s.split(';')[3]
            text = s.split(';')[4]
            location = s.split(';')[5]

            category = category[:0] + category[1:] #delete simbol #

            result = insert_poster(category, name, address, date_time, text, location)
            if result == 1:
                bot.send_message(message.chat.id, '–∞—Ñ–∏—à–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
            else:
                bot.send_message(message.chat.id, '—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
        except UnboundLocalError:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
        except IndexError:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
        else:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    elif message.text == '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã':
        # markup = types.InlineKeyboardMarkup()
        # for art_cinema in get_broadwey():
        #     markup.add(art_cinema)
        #
        # bot.send_message(message.chat.id, '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã –≥.–ë–∏—à–∫–µ–∫ ', reply_markup=markup)

        for i in get_broadwey():
            bot.send_message(message.chat.id, i)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data[:2] + call.data[len(call.data):] == '//':
                category = call.data[:0] + call.data[2:]
                article_poster = beautifully_poster(select_category_where(category))
                index = len(article_poster) / 7
                i = 1
                while i <= index:
                    string_num = '1'
                    string = '–ò–º—è: ' + article_poster['name' + string_num] + \
                             '\n–ê–¥—Ä–µ—Å: ' + article_poster['address' + string_num] + \
                             '\n–í—Ä–µ–º—è: ' + article_poster['date_time' + string_num] + \
                             '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + article_poster['text' + string_num]
                    link_location = article_poster['location' + string_num]

                    markup = types.InlineKeyboardMarkup()
                    item1 = types.InlineKeyboardButton(text="2–≥–∏—Å", url=link_location)
                    markup.add(item1)

                    bot.send_message(call.message.chat.id, string, reply_markup=markup)

                    i += 1

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                      reply_markup=None)

            # elif call.data[:4] + call.data[len(call.data):] == 'http':
            #
            #     address = get_cinema_address(call.data)
            #     bot.send_message(call.message.chat.id, '–ê–¥—Ä–µ—Å: ' + address['address'] + '\n–¢–µ–ª–µ—Ñ–æ–Ω: ' + address['cell_number'])
            #
            #     art_movie = parse_movie(call.data)
            #     for art in parse_movie(call.data):
            #         str = 'üé¨' + art['title'] + \
            #             '\nüì∂' + art['format'] + \
            #             '\nüïì' + art['time'] + \
            #             '\nüí∞' + art['price']
            #
            #         markup = types.InlineKeyboardMarkup()
            #         item1 = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∏–Ω–∏—Ü—É", url=art['link'])
            #         markup.add(item1)
            #
            #         bot.send_message(call.message.chat.id, str, reply_markup=markup)
            elif call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')

            else:
                bot.send_message(call.message.chat.id, 'good')

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                                  reply_markup=None)

            # bot.answer_callback_query(chat_id=call.message.chat.id, show_alert=False,
            #                           text="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except Exception as e:
        print(repr(e))
        print('grgrgr')


bot.polling(none_stop=True)
